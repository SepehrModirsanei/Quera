# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O6gMlA5GW_tSnraC7L-WZFl53rSJOTDR
"""

line1=input()
splited1=line1.split()
n=int(splited1[0])
s=int(splited1[1])
d=int(splited1[2])

def fill_spiral_matrix(n):
    matrix = [[0] * n for _ in range(n)]
    row_start = 0
    row_end = n - 1
    col_start = 0
    col_end = n - 1
    num = 1

    while row_start <= row_end and col_start <= col_end:
        for i in range(col_start, col_end + 1):
            matrix[row_end][i] = num
            num += 1
        row_end -= 1

        for i in range(row_end, row_start - 1, -1):
            matrix[i][col_end] = num
            num += 1
        col_end -= 1

        for i in range(col_end, col_start - 1, -1):
            matrix[row_start][i] = num
            num += 1
        row_start += 1

        for i in range(row_start, row_end + 1):
            matrix[i][col_start] = num
            num += 1
        col_start += 1

    return matrix

spiral_matrix = fill_spiral_matrix(n)
# for row in spiral_matrix:
#      print(row)



def find_coordinates(matrix, value):
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == value:
                return (i, j)  # Return the coordinates as a tuple

    return None  # If the value is not found in the matrix, return None

start=find_coordinates(spiral_matrix,s)
dest=find_coordinates(spiral_matrix,d)

# print (start)
# print(dest)

if start[1]>dest[1] :
  print(start[1]-dest[1],"L")
if start[1]<dest[1]:
  print(dest[1]-start[1],"R")

if start[0]>dest[0] :
  print(start[0]-dest[0],"U")
if start[0]<dest[0]:
  print(dest[0]-start[0],"D")